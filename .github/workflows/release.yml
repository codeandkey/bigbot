name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -z "$PREV_TAG" ]; then
          CHANGELOG="Initial release"
        else
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s" --no-merges)
        fi
        
        # Save changelog to file for multiline handling
        echo "$CHANGELOG" > CHANGELOG.md
        
        # Set output for later use
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Big Bot ${{ github.ref }}
        body: |
          ## Changes in this Release
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Download
          
          Choose the appropriate binary for your platform:
          
          ### Linux
          - **x86_64**: `bigbot-linux-x86_64.tar.gz`
          - **ARM64**: `bigbot-linux-aarch64.tar.gz`
          
          ### Windows
          - **x86_64**: `bigbot-windows-x86_64.exe.zip`
          
          ### macOS
          - **Intel**: `bigbot-macos-x86_64.tar.gz`
          - **Apple Silicon**: `bigbot-macos-aarch64.tar.gz`
          
          ## Installation
          
          1. Download the appropriate binary for your platform
          2. Extract the archive (if applicable)
          3. Make the binary executable: `chmod +x bigbot` (Unix systems)
          4. Run: `./bigbot` (it will auto-generate configuration)
          
          ## Docker
          
          ```bash
          docker pull codeandkey/big-bot:${{ github.ref_name }}
          ```
          
          ## What's New
          
          See the [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload Release Assets
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: bigbot
            asset_name: bigbot-linux-x86_64.tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: bigbot
            asset_name: bigbot-linux-aarch64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: bigbot.exe
            asset_name: bigbot-windows-x86_64.exe.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: bigbot
            asset_name: bigbot-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: bigbot
            asset_name: bigbot-macos-aarch64.tar.gz

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev ffmpeg
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install ffmpeg

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        fi
        cargo build --release --target ${{ matrix.target }}
      shell: bash

    - name: Prepare release package
      run: |
        mkdir -p release-package
        
        # Copy binary
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release-package/
        
        # Copy documentation and configuration files
        cp README.md release-package/
        cp CONFIG.md release-package/
        cp example-config.yml release-package/
        
        # Create LICENSE file if it doesn't exist
        if [ ! -f LICENSE ]; then
          cat > release-package/LICENSE << 'EOF'
        MIT License
        
        Copyright (c) 2025 Big Bot Contributors
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        EOF
        else
          cp LICENSE release-package/
        fi
        
        # Create installation script for Unix systems
        if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
          cat > release-package/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Installing Big Bot..."
        
        # Make binary executable
        chmod +x bigbot
        
        # Create symlink in /usr/local/bin if writable
        if [ -w /usr/local/bin ]; then
          ln -sf "$(pwd)/bigbot" /usr/local/bin/bigbot
          echo "Created symlink in /usr/local/bin/bigbot"
        else
          echo "To install globally, run: sudo ln -sf $(pwd)/bigbot /usr/local/bin/bigbot"
        fi
        
        echo "Installation complete!"
        echo "Run './bigbot' to start the bot."
        EOF
          chmod +x release-package/install.sh
        fi
        
        # Create the final archive
        cd release-package
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a ../${{ matrix.asset_name }} *
        else
          tar -czf ../${{ matrix.asset_name }} *
        fi
        cd ..
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

    - name: Calculate checksums
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          certutil -hashfile ${{ matrix.asset_name }} SHA256 > ${{ matrix.asset_name }}.sha256
        else
          shasum -a 256 ${{ matrix.asset_name }} > ${{ matrix.asset_name }}.sha256
        fi
      shell: bash

    - name: Upload checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.sha256
        asset_name: ${{ matrix.asset_name }}.sha256
        asset_content_type: text/plain

  docker-release:
    name: Build and Push Docker Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract tag version
      id: tag
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          codeandkey/big-bot:${{ steps.tag.outputs.version }}
          codeandkey/big-bot:latest
        labels: |
          org.opencontainers.image.title=Big Bot
          org.opencontainers.image.description=Advanced Mumble voice chat bot
          org.opencontainers.image.version=${{ steps.tag.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish-crates:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev ffmpeg

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
